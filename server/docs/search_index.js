(function () {
  window.DENO_DOC_SEARCH_INDEX = {"nodes":[{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"resolveDestination","file":"config/multer/multer.ts","doc":"Resolves the destination path for storing files based on the user ID and parent ID.\n\nThis function constructs a path using the provided `userId` and `parentId`, \nensures that the directory exists by creating it if necessary, and returns the resolved path.\n","location":{"filename":"config/multer/multer.ts","line":22,"col":13,"byteIndex":1035},"url":"./config/multer/multer.ts/~/resolveDestination.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"upload","file":"config/multer/multer.ts","doc":"Middleware for handling `multipart/form-data`, which is primarily used for uploading files.\nThis instance of multer is configured with the provided `multerOptions`.\n","location":{"filename":"config/multer/multer.ts","line":55,"col":13,"byteIndex":1769},"url":"./config/multer/multer.ts/~/upload.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"sendEmailConfirmationLink","file":"config/nodemailer/nodemailer.ts","doc":"Sends an email confirmation link to the specified user email.\n","location":{"filename":"config/nodemailer/nodemailer.ts","line":62,"col":13,"byteIndex":1899},"url":"./config/nodemailer/nodemailer.ts/~/sendEmailConfirmationLink.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"sendResetPasswordLink","file":"config/nodemailer/nodemailer.ts","doc":"Sends a password reset link to the specified user's email address.\n","location":{"filename":"config/nodemailer/nodemailer.ts","line":32,"col":13,"byteIndex":993},"url":"./config/nodemailer/nodemailer.ts/~/sendResetPasswordLink.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"cookieExtractor","file":"config/passport/strategies/mod.ts","doc":"Extracts the value of the 'auth_token' cookie from the request headers.\n","location":{"filename":"","line":14,"col":13,"byteIndex":468},"url":"./config/passport/strategies/mod.ts/~/cookieExtractor.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"verifyJwtFromHeader","file":"config/passport/strategies/mod.ts","doc":"Creates a JWT verification strategy using the public key defined in the environment variable `JWT_PUB_KEY`.\n","location":{"filename":"","line":43,"col":6,"byteIndex":1394},"url":"./config/passport/strategies/mod.ts/~/verifyJwtFromHeader.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"verifyJwtFromUrl","file":"config/passport/strategies/mod.ts","doc":"Creates a JWT verification strategy that extracts the JWT from a URL query parameter.\n\nThis function configures a Passport strategy to verify JWT tokens passed via a URL query parameter.\nIt uses the public key specified in the `JWT_PUB_KEY` environment variable to verify the token.\n","location":{"filename":"","line":16,"col":13,"byteIndex":642},"url":"./config/passport/strategies/mod.ts/~/verifyJwtFromUrl.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"createFolder","file":"controllers/file/mod.ts","doc":"Creates a new folder for the authenticated user.\n","location":{"filename":"","line":68,"col":13,"byteIndex":2087},"url":"./controllers/file/mod.ts/~/createFolder.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"createLink","file":"controllers/file/mod.ts","doc":"Creates a shareable link for a file.\n","location":{"filename":"","line":23,"col":13,"byteIndex":888},"url":"./controllers/file/mod.ts/~/createLink.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"deleteFile","file":"controllers/file/mod.ts","doc":"Deletes a file or folder for the authenticated user.\n","location":{"filename":"","line":27,"col":13,"byteIndex":1219},"url":"./controllers/file/mod.ts/~/deleteFile.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"getFile","file":"controllers/file/mod.ts","doc":"Handles the request to get a file for a user.\n\nThis function retrieves a file based on the user ID and file ID provided in the request parameters.\nIt checks if the user is authenticated, validates the file ID format, and attempts to find the file in the database.\nIf the file is found, it sets the appropriate headers and initiates the file download.\nIf any error occurs during the process, it passes the error to the next middleware.\n","location":{"filename":"","line":23,"col":13,"byteIndex":1132},"url":"./controllers/file/mod.ts/~/getFile.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"getFilesInfo","file":"controllers/file/mod.ts","doc":"Retrieves the file structure information for a given user and parent folder.\n","location":{"filename":"","line":26,"col":13,"byteIndex":1198},"url":"./controllers/file/mod.ts/~/getFilesInfo.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"uploadFiles","file":"controllers/file/mod.ts","doc":"Handles the upload of multiple files. This function uses a middleware to upload files to the disk,\nresolves the destination folder, and saves the file information to the database.\nIt also checks for user storage limits and handles errors appropriately.\n","location":{"filename":"","line":25,"col":13,"byteIndex":1213},"url":"./controllers/file/mod.ts/~/uploadFiles.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"deleteUser","file":"controllers/user/mod.ts","doc":"Deletes a user from the database.\n","location":{"filename":"","line":18,"col":13,"byteIndex":628},"url":"./controllers/user/mod.ts/~/deleteUser.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"sendPasswordResetLink","file":"controllers/user/mod.ts","doc":"Sends a password reset link to the user's email.\n","location":{"filename":"","line":27,"col":13,"byteIndex":1029},"url":"./controllers/user/mod.ts/~/sendPasswordResetLink.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"updateUser","file":"controllers/user/mod.ts","doc":"Updates a user's information based on the provided request body.\nThis function currently supports blocking/unblocking a user and can be extended in the future.\nAssumes that the admin is authenticated and authorized to perform the block operation.\n","location":{"filename":"","line":21,"col":13,"byteIndex":965},"url":"./controllers/user/mod.ts/~/updateUser.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"updateUserPassword","file":"controllers/user/mod.ts","doc":"Updates the user's password.\n\nThis function is an Express middleware that updates the password of the authenticated user.\nIt expects the user and jwtPayload to be attached to the request object by a preceding middleware.\nThe jwtPayload must have a type of 'new-password' to proceed.\n","location":{"filename":"","line":24,"col":13,"byteIndex":1049},"url":"./controllers/user/mod.ts/~/updateUserPassword.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"userLoginController","file":"controllers/user/mod.ts","doc":"Controller for handling user login requests.\n","location":{"filename":"","line":26,"col":13,"byteIndex":1094},"url":"./controllers/user/mod.ts/~/userLoginController.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"userRegistration","file":"controllers/user/mod.ts","doc":"Handles user registration.\n\nThis function performs the following steps:\n1. Validates the request body against the `RegisterSchema`.\n2. Checks if the email already exists in the database.\n3. Creates a new user with the provided username, email, and hashed password.\n4. Generates a JWT token for immediate login.\n5. Generates a JWT token for email verification.\n6. Sends an email confirmation link to the user's email.\n7. Sets an HTTP-only cookie with the authentication token.\n8. Redirects the user to the `/cloud/user` page.\n","location":{"filename":"","line":33,"col":13,"byteIndex":1393},"url":"./controllers/user/mod.ts/~/userRegistration.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"verifyPasswordResetToken","file":"controllers/user/mod.ts","doc":"Verifies the password reset token and redirects the user to the appropriate page.\n","location":{"filename":"","line":24,"col":13,"byteIndex":1085},"url":"./controllers/user/mod.ts/~/verifyPasswordResetToken.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"verifyUserEmail","file":"controllers/user/mod.ts","doc":"Verifies the user's email by updating the `verifiedAt` field in the user's record.\n","location":{"filename":"","line":22,"col":13,"byteIndex":956},"url":"./controllers/user/mod.ts/~/verifyUserEmail.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"FileSchema","file":"db/models/mod.ts","doc":"Schema definition for the File model.\n","location":{"filename":"","line":32,"col":13,"byteIndex":1447},"url":"./db/models/mod.ts/~/FileSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"LinkSchema","file":"db/models/mod.ts","doc":"Schema definition for the Link model.\n","location":{"filename":"","line":22,"col":13,"byteIndex":873},"url":"./db/models/mod.ts/~/LinkSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"UserSchema","file":"db/models/mod.ts","doc":"UserSchema defines the structure of the User document in the database.\n\nProperties:\n- `username` (String): The username of the user. This field is required.\n- `email` (String): The email address of the user. This field is required and must be unique.\n- `password` (String): The password of the user. This field is required.\n- `role` (Number): The role of the user. This field is required and defaults to 0.\n- `storageLimit` (Number): The storage limit for the user in bytes. This field is required and defaults to 100MB.\n- `usedStorage` (Number): The amount of storage used by the user in bytes. This field is required and defaults to 0.\n- `maxUploadSize` (Number): The maximum upload size for the user in MB. This field is required and defaults to 100MB.\n- `verifiedAt` (Date): The date when the user was verified. This field is optional and defaults to null.\n- `createdAt` (Date): The date when the user was created. This field defaults to the current date and time.\n- `updatedAt` (Date): The date when the user was last updated. This field defaults to the current date and time.\n- `isBlocked` (Boolean): Indicates whether the user is blocked. This field is required and defaults to false.","location":{"filename":"","line":34,"col":13,"byteIndex":1634},"url":"./db/models/mod.ts/~/UserSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Class","char":"c","title":"Class","title_lowercase":"class","title_plural":"Classes"}],"name":"AppError","file":"errors/AppError.ts","doc":"Custom error class that extends the built-in `Error` class.\nRepresents application-specific errors with an associated HTTP status code.","location":{"filename":"errors/AppError.ts","line":7,"col":0,"byteIndex":152},"url":"./errors/AppError.ts/~/AppError.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Property","char":"p","title":"Property","title_lowercase":"property","title_plural":"Properties"}],"name":"AppError.prototype.statusCode","file":"errors/AppError.ts","doc":"The HTTP status code associated with the error.","location":{"filename":"errors/AppError.ts","line":11,"col":2,"byteIndex":257},"url":"./errors/AppError.ts/~/AppError.prototype.statusCode.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"auth","file":"middlewares/mod.ts","doc":"Middleware to handle authentication and authorization.\n","location":{"filename":"","line":27,"col":13,"byteIndex":1094},"url":"./middlewares/mod.ts/~/auth.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"errorHandler","file":"middlewares/mod.ts","doc":"Middleware to handle errors in the application.\n","location":{"filename":"","line":18,"col":13,"byteIndex":752},"url":"./middlewares/mod.ts/~/errorHandler.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"linkAuth","file":"middlewares/mod.ts","doc":"Middleware to handle link authentication using JWT.\n\nThis middleware uses Passport to authenticate requests based on a JWT\nprovided in the URL. If authentication fails, the user is redirected\nto a \"not verified\" page. If authentication succeeds, the request is\npassed to the next middleware.\n","location":{"filename":"","line":19,"col":13,"byteIndex":674},"url":"./middlewares/mod.ts/~/linkAuth.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"clientRoutes","file":"routes/mod.ts","doc":"Defines the client routes for the application.\n\nRoutes:\n- GET `/` - Renders the index page.\n- GET `/cloud/user` - Renders the cloud page for a user. Requires authentication.\n- GET `/cloud/admin` - Renders the cloud page for an admin. Requires authentication.\n- GET `/cloud/shared/:linkId` - Renders a shared file page based on the link ID.\n- GET `/not-verified` - Renders the not verified page.\n- GET `/unauthorized` - Renders the unauthorized page.\n- GET `/password-reset` - Placeholder for password reset page.\n- GET `*` - Renders the not found page for any undefined routes.\n\nMiddleware:\n- `auth` - Middleware to handle authentication.\n\nError Handling:\n- Throws `AppError` if the user is not defined in authenticated routes.\n\nEnvironment Variables:\n- `ROLE_ADMIN` - Role ID for admin users.\n- `ROLE_USER` - Role ID for regular users.","location":{"filename":"","line":33,"col":13,"byteIndex":1264},"url":"./routes/mod.ts/~/clientRoutes.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"fileRoutes","file":"routes/mod.ts","doc":"Sets up the file-related routes for the Express application.\n\nRoutes:\n- POST /api/cloud/upload: Uploads files to the cloud. Requires authentication with role 1.\n- DELETE /api/cloud/delete/:id: Deletes a file by its ID. Requires authentication with role 1.\n- GET /api/cloud/download/:id: Downloads a file by its ID. Requires authentication with role 1.\n- POST /api/cloud/share/:id: Creates a shareable link for a file by its ID. Requires authentication with role 1.\n- GET /api/cloud/files/:parentId: Retrieves information about files in a specified directory. Requires authentication.\n- POST /api/cloud/directory: Creates a new directory in the cloud. Requires authentication with role 1.\n\nMiddleware:\n- `auth`: Middleware to handle authentication. Accepts an optional array of roles.\n\nControllers:\n- `uploadFiles`: Handles file upload logic.\n- `deleteFile`: Handles file deletion logic.\n- `getFile`: Handles file download logic.\n- `createLink`: Handles creation of shareable links.\n- `getFilesInfo`: Handles retrieval of file structure information.\n- `createFolder`: Handles creation of new directories.","location":{"filename":"","line":33,"col":13,"byteIndex":1716},"url":"./routes/mod.ts/~/fileRoutes.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"userRoutes","file":"routes/mod.ts","doc":"Defines the user-related routes for the application.\n\nRoutes:\n- POST /api/login: Authenticates a user and logs them in.\n- POST /api/register: Registers a new user.\n- PATCH /api/admin/update/:id: Updates user information for a specific user (admin only).\n- DELETE /api/admin/delete/:id: Deletes a specific user (admin only).\n- POST /api/logout: Logs out the current user and clears the authentication token.\n- GET /api/verify-email: Verifies a user's email address.\n- POST /api/send-password-reset-link: Sends a password reset link to the user's email.\n- GET /api/verify-password-reset-link: Verifies the password reset link.\n- PATCH /api/update-password: Updates the user's password.\n\nMiddleware:\n- `auth([2])`: Ensures the user is authenticated and has the required role (e.g., admin).\n- `linkAuth`: Ensures the link used for verification is valid.\n\nControllers:\n- `userLoginController`: Handles user login.\n- `userRegistration`: Handles user registration.\n- `updateUser`: Handles updating user information.\n- `deleteUser`: Handles deleting a user.\n- `verifyUserEmail`: Handles email verification.\n- `sendPasswordResetLink`: Handles sending password reset links.\n- `verifyPasswordResetToken`: Handles verifying password reset links.\n- `updateUserPassword`: Handles updating user passwords.","location":{"filename":"","line":42,"col":13,"byteIndex":2205},"url":"./routes/mod.ts/~/userRoutes.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"deleteFolderRec","file":"utils/mod.ts","doc":"Recursively deletes a folder and all its contents from the database.\n","location":{"filename":"","line":15,"col":13,"byteIndex":639},"url":"./utils/mod.ts/~/deleteFolderRec.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"generateJwtToken","file":"utils/mod.ts","doc":"Generates a JSON Web Token (JWT) using the provided claims.\n","location":{"filename":"","line":24,"col":13,"byteIndex":763},"url":"./utils/mod.ts/~/generateJwtToken.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"hashPassword","file":"utils/mod.ts","doc":"Hashes a password using the PBKDF2 algorithm with a randomly generated salt.\n","location":{"filename":"","line":18,"col":13,"byteIndex":620},"url":"./utils/mod.ts/~/hashPassword.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"multerOnErrorCleanup","file":"utils/mod.ts","doc":"Cleans up uploaded files in case of an error during the request processing.\n\nThis function checks if there are any files uploaded in the request. If files are found,\nit attempts to delete each file from the filesystem. If an error occurs during the deletion\nof a file, it logs the error to the console.\n","location":{"filename":"","line":16,"col":13,"byteIndex":617},"url":"./utils/mod.ts/~/multerOnErrorCleanup.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"resolvePath","file":"utils/mod.ts","doc":"Resolves the full path of a folder given a user ID and a parent folder ID.\n","location":{"filename":"","line":22,"col":0,"byteIndex":830},"url":"./utils/mod.ts/~/resolvePath.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Function","char":"f","title":"Function","title_lowercase":"function","title_plural":"Functions"}],"name":"verifyPassword","file":"utils/mod.ts","doc":"Verifies if the provided password matches the hashed password.\n","location":{"filename":"","line":43,"col":13,"byteIndex":1572},"url":"./utils/mod.ts/~/verifyPassword.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"CreateFolderSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for creating a folder.\n\nThis schema validates the structure of the data required to create a folder.\n\n- `name`: A string that must have a minimum length of 1 character.\n- `parentId`: A union type that can either be the literal string 'root' or a valid 24-character hexadecimal string.\n\nThe `parentId` field uses a regular expression to ensure that the string is a valid 24-character hex string.","location":{"filename":"validation-schemas/validationSchemas.ts","line":140,"col":13,"byteIndex":4466},"url":"./validation-schemas/validationSchemas.ts/~/CreateFolderSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"GetFilesSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for validating file identifiers.\n\nThis schema allows two types of values:\n1. The literal string 'root'.\n2. A 24-character hexadecimal string.\n\nThe hexadecimal string must match the regular expression /^[0-9a-fA-F]{24}$/.\n","location":{"filename":"validation-schemas/validationSchemas.ts","line":94,"col":13,"byteIndex":3057},"url":"./validation-schemas/validationSchemas.ts/~/GetFilesSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"TypeAlias","char":"T","title":"Type Alias","title_lowercase":"type alias","title_plural":"Type Aliases"}],"name":"LoginData","file":"validation-schemas/validationSchemas.ts","doc":"","location":{"filename":"validation-schemas/validationSchemas.ts","line":154,"col":0,"byteIndex":4747},"url":"./validation-schemas/validationSchemas.ts/~/LoginData.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"LoginSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for validating login credentials.\n\nThis schema validates the following fields:\n- `email`: A string that must be a valid email address.\n- `password`: A string that must be at least 8 characters long.","location":{"filename":"validation-schemas/validationSchemas.ts","line":10,"col":13,"byteIndex":273},"url":"./validation-schemas/validationSchemas.ts/~/LoginSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"TypeAlias","char":"T","title":"Type Alias","title_lowercase":"type alias","title_plural":"Type Aliases"}],"name":"NewPasswordData","file":"validation-schemas/validationSchemas.ts","doc":"","location":{"filename":"validation-schemas/validationSchemas.ts","line":157,"col":0,"byteIndex":4946},"url":"./validation-schemas/validationSchemas.ts/~/NewPasswordData.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"NewPasswordSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for validating a new password.\n\nThis schema ensures that the password is a string with a minimum length of 8 characters.\n","location":{"filename":"validation-schemas/validationSchemas.ts","line":49,"col":13,"byteIndex":1615},"url":"./validation-schemas/validationSchemas.ts/~/NewPasswordSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"ObjectIdSchema","file":"validation-schemas/validationSchemas.ts","doc":"A validation schema for MongoDB ObjectId.\n\nThis schema validates that the input is a string and matches the pattern\nof a 24-character hexadecimal string, which is the format of a MongoDB ObjectId.\n","location":{"filename":"validation-schemas/validationSchemas.ts","line":125,"col":13,"byteIndex":3902},"url":"./validation-schemas/validationSchemas.ts/~/ObjectIdSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"TypeAlias","char":"T","title":"Type Alias","title_lowercase":"type alias","title_plural":"Type Aliases"}],"name":"RegisterData","file":"validation-schemas/validationSchemas.ts","doc":"","location":{"filename":"validation-schemas/validationSchemas.ts","line":155,"col":0,"byteIndex":4806},"url":"./validation-schemas/validationSchemas.ts/~/RegisterData.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"RegisterSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for validating user registration data.\n\nThis schema ensures that the following fields are present and valid:\n- `username`: A string with a minimum length of 3 characters.\n- `email`: A valid email address.\n- `password`: A string with a minimum length of 8 characters.","location":{"filename":"validation-schemas/validationSchemas.ts","line":23,"col":13,"byteIndex":704},"url":"./validation-schemas/validationSchemas.ts/~/RegisterSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"TypeAlias","char":"T","title":"Type Alias","title_lowercase":"type alias","title_plural":"Type Aliases"}],"name":"ResetPasswordData","file":"validation-schemas/validationSchemas.ts","doc":"","location":{"filename":"validation-schemas/validationSchemas.ts","line":156,"col":0,"byteIndex":4871},"url":"./validation-schemas/validationSchemas.ts/~/ResetPasswordData.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"ResetPasswordSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for validating the reset password request.\n\nThis schema ensures that the provided email is a valid string and follows the email format.\n","location":{"filename":"validation-schemas/validationSchemas.ts","line":37,"col":13,"byteIndex":1227},"url":"./validation-schemas/validationSchemas.ts/~/ResetPasswordSchema.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"TypeAlias","char":"T","title":"Type Alias","title_lowercase":"type alias","title_plural":"Type Aliases"}],"name":"UpdateUserData","file":"validation-schemas/validationSchemas.ts","doc":"","location":{"filename":"validation-schemas/validationSchemas.ts","line":158,"col":0,"byteIndex":5017},"url":"./validation-schemas/validationSchemas.ts/~/UpdateUserData.html","category":"","declarationKind":"export","deprecated":false},{"kind":[{"kind":"Variable","char":"v","title":"Variable","title_lowercase":"variable","title_plural":"Variables"}],"name":"UpdateUserSchema","file":"validation-schemas/validationSchemas.ts","doc":"Schema for updating a user.\n","location":{"filename":"validation-schemas/validationSchemas.ts","line":63,"col":13,"byteIndex":2324},"url":"./validation-schemas/validationSchemas.ts/~/UpdateUserSchema.html","category":"","declarationKind":"export","deprecated":false}]};
})()